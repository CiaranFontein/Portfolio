{"version":3,"sources":["components/Header/index.js","components/Body/index.js","components/Footer/index.js","App.js","styles/index.js","serviceWorker.js","index.js"],"names":["Corner","styled","div","Container","Header","y","StyledBody","props","posFromTop","Body","useState","scrollPos","setScrollPos","console","log","useScrollPosition","currPos","Footer","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4lBAMA,IAAMA,EAASC,IAAOC,IAAV,KAUNC,EAAYF,IAAOC,IAAV,KAkBAE,EAZA,WACb,OACE,kBAACJ,EAAD,KACE,kBAAC,WAAD,CAAUK,EAAG,EAAE,IAAM,MACnB,kBAACF,EAAD,KACE,0C,0NCtBV,IAAMG,EAAaL,IAAOC,IAAV,KAGP,SAAAK,GAAK,OAAIA,EAAMC,WAAWH,KACT,SAAAE,GAAK,OAAKA,EAAMC,WAAWH,KACzC,SAAAE,GAAK,OAAKA,EAAMC,WAAWH,EAAI,MAuB5BI,EAnBF,WAAO,IAAD,EACiBC,mBAAS,GAD1B,mBACVC,EADU,KACCC,EADD,KAYjB,OAVAC,QAAQC,IAAIH,GACZI,6BACE,YAAkB,IAAfC,EAAc,EAAdA,QACDJ,EAAaI,KAEf,CAACL,GACD,MACA,EACA,KAGA,kBAACL,EAAD,CAAYE,WAAYG,GAAxB,U,2NCxBJ,IAAMX,EAASC,IAAOC,IAAV,KAcGe,EAJA,WACb,OAAO,kBAAC,EAAD,oB,8ECTT,IAAMC,EAAYjB,IAAOC,IAAV,ICJb,8DDkBaiB,MAVf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QEFcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,mBAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.ba98545f.chunk.js","sourcesContent":["import \"./style.css\";\n\nimport { Parallax } from \"react-scroll-parallax\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Corner = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 0;\n  border-top: 50vh solid red;\n  border-right: 50vw solid transparent;\n`;\n\nconst Container = styled.div`\n  position: absolute;\n  top: -50vh;\n  font-size: 92px;\n`;\n\nconst Header = () => {\n  return (\n    <Corner>\n      <Parallax y={[-2000, 2000]}>\n        <Container>\n          <h1>Ciaran</h1>\n        </Container>\n      </Parallax>\n    </Corner>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport { useScrollPosition } from \"@n8tb1t/use-scroll-position\";\n\nconst StyledBody = styled.div`\n  height: 400vh;\n  width: 400vw;\n  top: ${props => props.posFromTop.y}px;\n  transform: translateX(${props => -props.posFromTop.y}px)\n    skewX(${props => -props.posFromTop.y / 40}deg);\n  transition: transform 2s;\n`;\n\nconst Body = () => {\n  const [scrollPos, setScrollPos] = useState(0);\n  console.log(scrollPos);\n  useScrollPosition(\n    ({ currPos }) => {\n      setScrollPos(currPos);\n    },\n    [scrollPos],\n    null,\n    false,\n    300\n  );\n  return (\n    <StyledBody posFromTop={scrollPos}>\n      Hello\n    </StyledBody>\n  );\n};\n\nexport default Body;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Corner = styled.div`\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  width: 0;\n  height: 0;\n  border-bottom: 50vh solid red;\n  border-left: 50vw solid transparent;\n`;\n\nconst Footer = () => {\n  return <Corner>The Footer</Corner>;\n};\n\nexport default Footer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Header, Body, Footer } from \"./components\";\nimport { flexCenter } from \"./styles\";\n\nconst StyledApp = styled.div`\n  ${flexCenter}\n`;\n\nfunction App() {\n  return (\n    <StyledApp>\n      <Header />\n      <Body />\n      <Footer />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","export const flexCenter =\n  \"display: flex; justify-content: center; align-items:center\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ParallaxProvider } from \"react-scroll-parallax\";\n\nReactDOM.render(\n  <ParallaxProvider>\n    <App />\n  </ParallaxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}